#!/usr/bin/env python
"""
CLI Tool to print out AWS hosting costs separated by client tag.
"""
import argparse
import asyncio
import concurrent.futures
import locale

from rich.console import Console
from rich.table import Table

from hostess.aws import AWSSession
from hostess.client import Client
from hostess.config import ORG_NAME, CLIENTS


async def get_cost_and_usage_for_clients(executor):
    """Non-blocking function to grab cost and usage data for tagged clients in AWS."""
    loop = asyncio.get_event_loop()
    blocking_tasks = []

    cur_func = SESSION.create_cost_and_usage_function(Client(ORG_NAME, order=-1))
    blocking_tasks.append(loop.run_in_executor(executor, cur_func))

    for order, client in enumerate(CLIENTS):
        if ARGS.client and client.name != ARGS.client:
            continue

        client.order = order
        cur_func = SESSION.create_cost_and_usage_function(client)
        blocking_tasks.append(loop.run_in_executor(executor, cur_func))

    completed, _pending = await asyncio.wait(blocking_tasks)
    results = [t.result() for t in completed]
    return results


def setup_output():
    """Create & return Rich Text Output Console & Table."""
    console = Console()
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("Client")
    table.add_column("Total Cost", justify="right")
    table.add_column("Hosting Fee", justify="right")
    table.add_column("Margin", justify="right")

    return console, table


def save_to_csvfile(table):
    """Save Rich.Table as CSV file to the filepath ARGS.file."""
    import csv

    with open(ARGS.file, "w") as csvfile:
        csv_writer = csv.writer(csvfile)
        headers = []
        rows = []

        for col_index, column in enumerate(table.columns):
            headers.append(column.header)
            for row_index, cell in enumerate(column.cells):
                if not col_index:
                    row = []
                    rows.append(row)
                else:
                    row = rows[row_index]

                row.insert(col_index, cell)

        csv_writer.writerow(headers)
        csv_writer.writerows(rows)


def main():
    """Loop through Client tags for the given date range and print results."""
    console, table = setup_output()

    executor = concurrent.futures.ThreadPoolExecutor(max_workers=10)
    event_loop = asyncio.get_event_loop()

    with console.status("[cyan]Calling out to AWS Cost Explorer..."):
        client_results = event_loop.run_until_complete(
            get_cost_and_usage_for_clients(executor)
        )

    grand_total, tagged_total, gap = "", 0, 0

    for client in sorted(client_results, key=lambda r: r.order):
        # If the result is for the entire organization, it is considered
        # the grand total for the time period and the hosting margin is calculated
        # based on that total.
        if client.name == ORG_NAME and client.order == -1:
            grand_total = client.get_formatted_total_costs()
            gap = client.total_costs
        else:
            tagged_total += client.total_costs
            gap -= client.total_costs

            if ARGS.debug:
                console.print(f"[bold red]{client.name} CUR Filter:")
                console.log(client.cur_filter, style="green")

            table.add_row(
                client.name,
                client.get_formatted_total_costs(),
                client.get_formatted_hosting_fee(),
                client.get_formatted_margin(),
                style="bold red" if client.margin < 0 else None,
            )

    console.print(table)

    if not ARGS.client:
        # Print summary AWS cost total for date range - included avg & untagged costs
        tagged_average = locale.currency(tagged_total / len(CLIENTS), grouping=True)
        formatted_gap = locale.currency(gap, grouping=True)
        console.print(f"[bold green]{ORG_NAME} - Total: {grand_total}")
        console.print(f"[bold yellow]{ORG_NAME} - Tagged Average: {tagged_average}")
        console.print(f"[bold red]{ORG_NAME} - Untagged Gap: {formatted_gap}")

    if ARGS.file:
        # with console.status(f"[cyan]Saving table as a CSV file to {ARGS.file}..."):
        save_to_csvfile(table)
        console.print(f"[bold cyan]Saved table as a CSV file to {ARGS.file}")


if __name__ == "__main__":
    locale.setlocale(locale.LC_ALL, "")
    PARSER = argparse.ArgumentParser(
        description="Print out per-client AWS hosting cost details."
    )
    PARSER.add_argument(
        "-s", "--start-date", help="The Start Date - format YYYY-MM-DD", required=True
    )
    PARSER.add_argument(
        "-e", "--end-date", help="The End Date - format YYYY-MM-DD", required=True
    )
    PARSER.add_argument("-c", "--client", help="Report on a single Client")
    PARSER.add_argument(
        "-f", "--file", help="Save report as a CSV file to FILE", metavar="FILE"
    )
    PARSER.add_argument(
        "-d",
        "--debug",
        help="Display programming debug information",
        action="store_true",
    )
    ARGS = PARSER.parse_args()
    SESSION = AWSSession(ARGS.start_date, ARGS.end_date)
    main()
